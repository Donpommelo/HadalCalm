package com.mygdx.hadal.statuses;

import com.mygdx.hadal.battle.DamageSource;
import com.mygdx.hadal.battle.DamageTag;
import com.mygdx.hadal.constants.StatusPriority;
import com.mygdx.hadal.constants.SyncType;
import com.mygdx.hadal.effects.Particle;
import com.mygdx.hadal.effects.Shader;
import com.mygdx.hadal.schmucks.entities.ParticleEntity;
import com.mygdx.hadal.schmucks.entities.hitboxes.Hitbox;
import com.mygdx.hadal.schmucks.userdata.BodyData;
import com.mygdx.hadal.states.PlayStateClient;
import com.mygdx.hadal.states.PlayState;


/**
 * Invulnerable units cannot receive damage
 * @author Dippoboo Drenaldo
 */
public class Invulnerability extends Status {

	private static final float LINGER = 1.25f;

	//keep track of whether spawn particle has been created or not.
	private boolean particleCreated;

	public Invulnerability(PlayState state, float i, BodyData p, BodyData v) {
		super(state, i, false, p, v);
		this.setPriority(StatusPriority.PRIORITY_SET);

		//set shader here so client can handle it on respawn
		inflicted.getSchmuck().getShaderHelper().setShader(Shader.PULSE_WHITE, duration);
	}

	@Override
	public void timePassing(float delta) {
		super.timePassing(delta);
		if (!particleCreated) {
			particleCreated = true;

			ParticleEntity particle = new ParticleEntity(state, inflicted.getSchmuck(), Particle.GLITTER, LINGER, duration + LINGER,
					true, SyncType.NOSYNC).setPrematureOff(LINGER);

			if (!state.isServer()) {
				((PlayStateClient) state).addEntity(particle.getEntityID(), particle, false, PlayStateClient.ObjectLayer.EFFECT);
			}
		}
	}

	@Override
	public float onReceiveDamage(float damage, BodyData perp, Hitbox damaging, DamageSource source, DamageTag... tags) {
		return 0;
	}
	
	@Override
	public statusStackType getStackType() {
		return statusStackType.REPLACE;
	}
}

package com.mygdx.hadal.statuses;

import com.mygdx.hadal.effects.Particle;
import com.mygdx.hadal.schmucks.SyncType;
import com.mygdx.hadal.schmucks.bodies.ParticleEntity;
import com.mygdx.hadal.schmucks.bodies.hitboxes.Hitbox;
import com.mygdx.hadal.schmucks.userdata.BodyData;
import com.mygdx.hadal.states.PlayState;

import static com.mygdx.hadal.utils.Constants.PRIORITY_SET;

/**
 * Invulnerable units cannot receive damage
 * @author Dippoboo Drenaldo
 */
public class Invulnerability extends Status {

	//this is the particle entity attached to the unit.
	private ParticleEntity shield;
	
	public Invulnerability(PlayState state, float i, BodyData p, BodyData v) {
		super(state, i, false, p, v);
		this.setPriority(PRIORITY_SET);
	}

	@Override
	public void onRemove() {
		if (shield != null) {
			shield.setDespawn(true);
			shield.turnOff();
		}
	}
	
	@Override
	public void timePassing(float delta) {
		super.timePassing(delta);
		if (shield == null) {
			shield = new ParticleEntity(state, inflicted.getSchmuck(), Particle.SHIELD, 0.0f, duration, true, SyncType.TICKSYNC);
		}
	}
	
	@Override
	public float onReceiveDamage(float damage, BodyData perp, Hitbox damaging, DamageTypes... tags) {
		return 0;
	}
	
	@Override
	public statusStackType getStackType() {
		return statusStackType.REPLACE;
	}
}

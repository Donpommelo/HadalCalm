package com.mygdx.hadal.statuses;

import com.mygdx.hadal.battle.DamageSource;
import com.mygdx.hadal.battle.DamageTag;
import com.mygdx.hadal.effects.Particle;
import com.mygdx.hadal.effects.Shader;
import com.mygdx.hadal.schmucks.SyncType;
import com.mygdx.hadal.schmucks.entities.ParticleEntity;
import com.mygdx.hadal.schmucks.entities.hitboxes.Hitbox;
import com.mygdx.hadal.schmucks.userdata.BodyData;
import com.mygdx.hadal.states.PlayState;

import static com.mygdx.hadal.utils.Constants.PRIORITY_SET;

/**
 * Invulnerable units cannot receive damage
 * @author Dippoboo Drenaldo
 */
public class Invulnerability extends Status {

	private static final float LINGER = 1.25f;
	
	public Invulnerability(PlayState state, float i, BodyData p, BodyData v) {
		super(state, i, false, p, v);
		this.setPriority(PRIORITY_SET);

		//set shader here so client can handle it on respawn (but sync = true for post-spawn invuln effects)
		inflicted.getSchmuck().setShader(Shader.PULSE_WHITE, duration, true);
	}

	@Override
	public void onInflict() {
		new ParticleEntity(state, inflicted.getSchmuck(), Particle.GLITTER, LINGER, duration + LINGER,
				true, SyncType.CREATESYNC).setPrematureOff(LINGER);
	}

	@Override
	public float onReceiveDamage(float damage, BodyData perp, Hitbox damaging, DamageSource source, DamageTag... tags) {
		return 0;
	}
	
	@Override
	public statusStackType getStackType() {
		return statusStackType.REPLACE;
	}
}

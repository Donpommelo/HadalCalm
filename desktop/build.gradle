buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_14)) {
            classpath "org.beryx:badass-runtime-plugin:1.13.0"
        }
    }
}

if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_14)) {
    apply plugin: 'org.beryx.runtime'
}
else {
    apply plugin: 'application'
}

sourceSets.main.resources.srcDirs += [ rootProject.file('assets').path ]
sourceSets.main.java.srcDirs = [ "src/" ]
mainClassName = 'com.mygdx.hadal.desktop.DesktopLauncher'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

dependencies {
    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-lwjgl3-glfw-awt-macos:$gdxVersion"
    implementation project(":core")
}

def jarName = "${appName}-${version}.jar"
def os = System.properties['os.name'].toLowerCase()

run {
    setWorkingDir(rootProject.file('assets').path)
    setIgnoreExitValue(true)
    if (os.contains('mac')) jvmArgs += "-XstartOnFirstThread"
}

jar {
    archiveFileName.set(jarName)
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    destinationDirectory = file("${getLayout().getBuildDirectory().asFile.get().absolutePath}/lib")
    dependsOn configurations.runtimeClasspath
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude('linux/arm32/**', 'linux/arm64/**', 'META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')

//    project.delete("../core/assets/save/ChatLog.json")
//    project.delete("../core/assets/save/Loadout.json")
//    project.delete("../core/assets/save/Keybind.json")
//    project.delete("../core/assets/save/Record.json")
//    project.delete("../core/assets/save/Settings.json")
//    project.delete("../core/assets/err.txt")

    dependencies {
        exclude('META-INF/INDEX.LIST', 'META-INF/maven/**')
    }

    manifest {
        attributes 'Main-Class': project.mainClassName
    }

    doLast {
        file(archiveFile).setExecutable(true, false)
    }
}

//task proguard(type : proguard.gradle.ProGuardTask) {
//    outputs.upToDateWhen { false }
//    configuration 'proguard-rules.pro'
//    libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
//
//    injars "build/lib/${appName}-Demo.jar"
//    outjars "build/lib/${appName}.jar"
//}
//
//proguard.dependsOn jar

if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_14)) {
    tasks.jpackageImage.doNotTrackState("This task both reads from and writes to the build folder.")
    runtime {
        options.set(['--strip-debug',
                     '--compress', '2',
                     '--no-header-files',
                     '--no-man-pages',
                     '--strip-native-commands',
                     '--vm', 'server'])

        modules.set([
                'java.base',
                'java.desktop',
                'java.sql',
                'java.xml',
                'jdk.crypto.cryptoki',
                'jdk.unsupported'])

        distDir.set(file(getLayout().getBuildDirectory()))

        jpackage {
            imageName = appName
            skipInstaller = true
            jpackageHome = javaHome.getOrElse("")
            mainJar = jarName

            if (os.contains('win')) {
                imageOptions = ["--icon", "../icons/icon.ico"]
            } else if (os.contains('nix') || os.contains('nux') || os.contains('bsd')) {
                imageOptions = ["--icon", "../icons/icon.png"]
            } else if (os.contains('mac')) {
                imageOptions = ["--icon", "../icons/icon.icns", "--java-options", "\"-XstartOnFirstThread\""]
            }
        }
    }
}

tasks.register('dist') {
    dependsOn 'jar'
}

jpackageImage.doLast {
    file("build/jpackage/HadalCalm/app/${appName}-Demo.jar").delete()
}
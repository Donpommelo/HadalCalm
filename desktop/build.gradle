buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.beryx:badass-runtime-plugin:1.12.2"
    }
}

apply plugin: 'application'
apply plugin: 'org.beryx.runtime'

sourceSets.main.resources.srcDirs += [ rootProject.file('assets').path ]
sourceSets.main.java.srcDirs = [ "src/" ]
mainClassName = 'com.mygdx.hadal.desktop.DesktopLauncher'
sourceCompatibility = 15.0

def osName = System.getProperty('os.name').toLowerCase(Locale.ROOT)

dependencies {
    implementation project(":core")
    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
}

import org.gradle.internal.os.OperatingSystem

run {
    workingDir = rootProject.file('assets').path
    setIgnoreExitValue(true)

    if (OperatingSystem.current() == OperatingSystem.MAC_OS) {
        // Required to run LWJGL3 Java apps on MacOS
        jvmArgs += "-XstartOnFirstThread"
    }
}

jar {
    duplicatesStrategy = "INCLUDE"
    destinationDirectory = file("$buildDir/lib")
    archiveFileName = "${appName}-${archiveVersion.get()}.jar"
    exclude('linux/arm32/**', 'linux/arm64/**')
    dependsOn configurations.runtimeClasspath
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

jpackageImage.dependsOn jar

runtime {
    options = ['--strip-debug',
               '--compress', '2',
               '--no-header-files',
               '--no-man-pages',
               '--strip-native-commands',
               '--vm', 'server']
    modules = ['java.base' ,
               'java.desktop',
               'java.logging',
               'java.sql',
               'java.xml',
               'jdk.unsupported']
    distDir = file(buildDir)

    jpackage {
        mainJar = jar.archiveFileName.get()
        imageName = appName;
        if (osName.contains('windows')) {
            imageOptions = ["--icon", file("../icons/icon.ico")]
        } else if (osName.contains('linux')) {
            imageOptions = ["--icon", file("../icons/icon.png")]
        } else if (osName.contains('mac')) {
            imageOptions = ["--icon", file("../icons/icon.icns")]
        }
    }
}